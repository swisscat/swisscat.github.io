{"version":3,"sources":["Quizz.js","Navbar.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Quizz","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answer","formattedAnswer","showFeedback","similarityThreshold","numberThreshold","handleKeyPress","bind","assertThisInitialized","refresh","_this2","possibilities","question","names","Math","abs","population","some","item","stringSimilarity","feedback","feedbackType","feedbackComponent","_this3","validateAnswer","toLocaleString","react_default","a","createElement","className","concat","input","type","onChange","e","setState","target","value","onKeyPress","number_format_default","thousandSeparator","onValueChange","values","formattedValue","src","flag","alt","onClick","key","Component","Navbar","navigation","close","arguments","length","undefined","inputElement","click","navigateTo","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ref","id","version","Data","columns","scope","data","map","country","join","capital","name","App","mock","loaded","error","countries","questions","api","Promise","resolve","reject","mockData","fetch","then","res","json","apiCall","altSpellings","filter","isLoaded","_this$state","content","floor","random","src_Quizz","assign","src_Data","role","src_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ce35fb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\nimport { stringSimilarity } from \"string-similarity-js\";\n\nclass Quizz extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { answer: '', formattedAnswer: '', showFeedback: false, similarityThreshold: 0.5, numberThreshold: 0.1 };\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n\n    validateAnswer() {\n        let possibilities = [this.props[this.props.question]];\n\n        switch (this.props.question) {\n            case 'name':\n                possibilities = this.props.names;\n                break;\n\n            case 'population':\n                return Math.abs((this.state.answer - this.props.population) / this.props.population) < this.state.numberThreshold;\n\n            case 'capital':\n                break;\n\n            default:\n                break;\n        }\n\n        return possibilities.some((item) => {\n            return stringSimilarity(item, this.state.answer) > this.state.similarityThreshold;\n        });\n    }\n\n    render() {\n        let feedback, feedbackType, feedbackComponent;\n        if (this.state.answer && this.state.showFeedback) {\n\n            if (!this.props.question) {\n                feedback = \"Missing question\";\n                feedbackType = \"danger\";\n            }\n            else if (typeof this.props[this.props.question] === \"undefined\") {\n                feedback = \"Invalid question type \" + this.props.question;\n                feedbackType = \"danger\";\n            }\n            else if (this.validateAnswer()) {\n                feedback = \"Correct!\";\n                feedbackType = \"success\";\n            }\n            else {\n                feedback = \"Wrong! The \" + this.props.question + \" is \" + this.props[this.props.question].toLocaleString();\n                feedbackType = \"danger\";\n            }\n\n            feedbackComponent = <div className={`mt-3 alert alert-${feedbackType}`}>{feedback}</div>\n        }\n\n        let input = <input className=\"form-control\" type=\"text\" onChange={(e) => this.setState({answer: e.target.value})} onKeyPress={this.handleKeyPress} value={this.state.answer} />;\n\n\n        if (this.props.question === 'population') {\n            input = <NumberFormat className=\"form-control\" onKeyPress={this.handleKeyPress} thousandSeparator={true} value={this.state.formattedAnswer} onValueChange={(values) => {\n                const {formattedValue, value} = values;\n                this.setState({formattedAnswer: formattedValue, answer: value})\n            }}/>\n        }\n\n        return (\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-4\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top border-bottom\" src={this.props.flag} alt=\"{this.props.name}\" />\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">What's the {this.props.question} of this country ?</h5>\n                            {input}\n                        </div>\n                        <div className=\"card-footer\">\n                            <button type=\"button\" className=\"btn btn-default btn-outline-primary\" onClick={() => {this.setState({showFeedback: true})}}>\n                                <i className=\"fas fa-check\" />&nbsp;\n                                Check\n                            </button>\n&nbsp;\n                            <button type=\"button\" className=\"btn btn-default btn-outline-secondary\" onClick={this.refresh}>\n                                <i className=\"fas fa-sync\" />&nbsp;\n                                New\n                            </button>\n                        </div>\n                    </div>\n\n                    {feedbackComponent}\n                </div>\n            </div>\n        )\n    }\n\n    handleKeyPress(e) {\n        if (e.key === 'Enter') {\n            if (this.state.showFeedback) {\n                return this.refresh();\n            }\n\n            this.setState({showFeedback: true});\n            return false;\n        }\n    }\n\n    refresh() {\n        this.setState({answer: '', showFeedback: false, formattedAnswer: ''});\n        this.props.refresh();\n    }\n}\n\nexport default Quizz;","import React, { Component } from 'react';\nclass Navbar extends Component {\n\n    navigateTo(navigation, close = true) {\n        if (this.inputElement && close)\n            this.inputElement.click();\n\n        this.props.navigateTo(navigation);\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <button className=\"navbar-brand btn btn-link\" onClick={() => this.navigateTo('', false)}>Geo Trainer</button>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\" ref={input => this.inputElement = input}>\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                    <div className=\"navbar-nav mr-auto\">\n                        <button className=\"nav-item nav-link btn btn-link\" onClick={() => this.navigateTo('quizz')}>Quizz</button>\n                        <button className=\"nav-item nav-link btn btn-link\" onClick={() => this.navigateTo('data')}>Database</button>\n                    </div>\n\n                    <span className=\"navbar-text\">\n                        v{this.props.version}\n                    </span>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Data extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: this.props.columns\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <table className=\"table table-hover gt-data d-none d-md-table\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\" />\n                        <th scope=\"col\">Country</th>\n                        <th scope=\"col\">Capital</th>\n                        <th scope=\"col\">Population</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.data.map(country => (\n                        <tr key={country.names.join(',')}>\n                            <th scope=\"row\" className=\"th-img\"><img src={country.flag} alt=\"\" className=\"img-thumbnail\" /></th>\n                            <td>{country.names.join(', ')}</td>\n                            <td>{country.capital}</td>\n                            <td>{country.population.toLocaleString()}</td>\n                        </tr>\n\n                    ))}\n                    </tbody>\n                </table>\n                <div className=\"d-md-none\">\n                    {this.props.data.map(country => (\n                        <div className=\"row\" key={country.names.join(',')}>\n                            <div className=\"col-5\">\n                                <img src={country.flag} alt=\"\" className=\"img-fluid\" />\n                            </div>\n                            <div className=\"col-7\">\n                                <p>{country.name}<br />{country.capital}<br />{country.population.toLocaleString()}</p>\n                            </div>\n                        </div>\n\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Data;","import React, { Component } from 'react';\nimport Quizz from \"./Quizz\";\nimport Navbar from \"./Navbar\";\nimport Data from \"./Data\";\nimport mockData from './mock';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mock: false,\n            version: '0.4',\n            loaded: false,\n            error: null,\n            countries: [],\n            questions: [\n                'capital', 'name', 'population'\n            ],\n            navigation: null,\n        };\n    }\n\n    apiCall(api) {\n        if (this.state.mock) {\n            return new Promise((resolve, reject) => {\n                if (typeof mockData[api] !== \"undefined\")\n                    resolve(mockData[api]);\n                else\n                    reject('No mock for ' + api);\n            });\n        } else {\n            return fetch(api)\n                .then(res => res.json())\n        }\n    }\n\n    componentDidMount() {\n        this.apiCall(\"https://restcountries.eu/rest/v2/all\")\n            .then((countries) => {\n                    this.setState({\n                        loaded: true,\n                        countries: countries.map((country) => {\n                            country.names = [country.name].concat(country.altSpellings.filter(name => name.length > 2));\n\n                            return country;\n                        })\n                    })\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: false,\n                        error: error\n                    })\n                });\n    }\n\n    navigateTo = (navigation) => {\n        this.setState({navigation: navigation});\n    };\n\n    render() {\n        const { error, loaded, navigation, questions, countries} = this.state;\n\n        let content = <h1>Loading</h1>;\n\n        if (loaded) {\n            switch (navigation) {\n                case 'quizz':\n\n                    let country = countries[Math.floor(Math.random()*countries.length)];\n\n                    content = <Quizz {...country} question={questions[Math.floor(Math.random() * questions.length)]} refresh={() => this.navigateTo('quizz')}/>;\n\n                    break;\n\n                case 'data':\n                    content = <Data data={countries} columns={questions} />;\n                    break;\n\n                default:\n                    content =\n                        <div>\n                            <h1>Geo Trainer</h1>\n                            <p>is your companion to memorize geographical data.</p>\n                            <br/>\n                            <ul>\n                                <li>Use Database contains the raw data to learn</li>\n                                <li>Test your knowledge with the Quizz</li>\n                            </ul>\n                        </div>;\n                    break;\n            }\n        }\n\n        if (error) {\n            content = <div className=\"alert alert-danger\" role=\"alert\">{error}</div>\n        }\n\n        return (\n            <div className=\"app\">\n                <Navbar navigateTo={this.navigateTo} version={this.state.version} />\n                <main className=\"container mt-3\">\n                    {content}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}